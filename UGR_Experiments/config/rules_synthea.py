rules={"rules":["?a  NEXT  ?b   => ?a  HAS_END  ?b",
"?a  HAS_END  ?b   => ?a  NEXT  ?b",
"?h  HAS_CARE_PLAN  ?b  ?a  HAS_END  ?h   => ?a  HAS_CARE_PLAN  ?b",
"?g  BELONGS_TO  ?a  ?g  HAS_ADDRESS  ?b   => ?a  HAS_ADDRESS  ?b",
"?h  HAS_CARE_PLAN  ?b  ?a  NEXT  ?h   => ?a  HAS_CARE_PLAN  ?b",
"?g  HAS_CARE_PLAN  ?b  ?g  NEXT  ?a   => ?a  HAS_CARE_PLAN  ?b",
"?a  BELONGS_TO  ?h  ?h  HAS_ADDRESS  ?b   => ?a  HAS_ADDRESS  ?b",
"?g  HAS_CARE_PLAN  ?b  ?g  HAS_END  ?a   => ?a  HAS_CARE_PLAN  ?b",
"?h  HAS_CONDITION  ?b  ?a  HAS_END  ?h   => ?a  HAS_CONDITION  ?b",
"?g  HAS_PAYER  ?b  ?g  NEXT  ?a   => ?a  HAS_PAYER  ?b",
"?h  HAS_PROVIDER  ?b  ?a  NEXT  ?h   => ?a  HAS_PROVIDER  ?b",
"?h  HAS_PAYER  ?b  ?a  NEXT  ?h   => ?a  HAS_PAYER  ?b",
"?g  HAS_ENCOUNTER  ?a  ?g  INSURANCE_START  ?b   => ?a  HAS_PAYER  ?b",
"?g  HAS_CONDITION  ?b  ?g  NEXT  ?a   => ?a  HAS_CONDITION  ?b",
"?g  HAS_ENCOUNTER  ?a  ?g  INSURANCE_END  ?b   => ?a  HAS_PAYER  ?b",
"?g  HAS_PROVIDER  ?b  ?g  NEXT  ?a   => ?a  HAS_PROVIDER  ?b",
"?h  HAS_CONDITION  ?b  ?a  NEXT  ?h   => ?a  HAS_CONDITION  ?b",
"?g  HAS_CONDITION  ?b  ?g  HAS_END  ?a   => ?a  HAS_CONDITION  ?b",
"?a  HAS_END  ?h  ?b  NEXT  ?h   => ?a  HAS_END  ?b",
"?g  HAS_PROCEDURE  ?b  ?g  NEXT  ?a   => ?a  HAS_PROCEDURE  ?b",
"?h  HAS_PROCEDURE  ?b  ?a  NEXT  ?h   => ?a  HAS_PROCEDURE  ?b",
"?b  HAS_PAYER  ?h  ?a  INSURANCE_START  ?h   => ?a  HAS_ENCOUNTER  ?b",
"?h  NEXT  ?b  ?a  NEXT  ?h   => ?a  HAS_END  ?b",
"?b  HAS_PAYER  ?h  ?a  INSURANCE_END  ?h   => ?a  HAS_ENCOUNTER  ?b",
"?a  HAS_END  ?h  ?h  NEXT  ?b   => ?a  HAS_END  ?b",
"?a  HAS_ENCOUNTER  ?h  ?b  HAS_END  ?h   => ?a  HAS_ENCOUNTER  ?b",
"?h  HAS_DRUG  ?b  ?a  HAS_END  ?h   => ?a  HAS_DRUG  ?b",
"?h  HAS_DRUG  ?b  ?a  NEXT  ?h   => ?a  HAS_DRUG  ?b",
"?a  HAS_ENCOUNTER  ?h  ?b  NEXT  ?h   => ?a  HAS_ENCOUNTER  ?b",
"?g  HAS_DRUG  ?b  ?g  NEXT  ?a   => ?a  HAS_DRUG  ?b",
"?a  HAS_ENCOUNTER  ?h  ?h  HAS_END  ?b   => ?a  HAS_ENCOUNTER  ?b",
"?a  HAS_ENCOUNTER  ?h  ?h  NEXT  ?b   => ?a  HAS_ENCOUNTER  ?b",
"?g  HAS_DRUG  ?b  ?g  HAS_END  ?a   => ?a  HAS_DRUG  ?b",
"?a  HAS_END  ?h  ?b  NEXT  ?h   => ?a  NEXT  ?b",
"?g  HAS_END  ?b  ?g  NEXT  ?a   => ?a  NEXT  ?b",
"?g  HAS_END  ?a  ?g  HAS_END  ?b   => ?a  NEXT  ?b",
"?a  HAS_ADDRESS  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?a  HAS_CARE_PLAN  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?a  BELONGS_TO  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?a  HAS_OBSERVATION  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?a  HAS_PAYER  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?a  HAS_CONDITION  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?a  HAS_END  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?g  HAS_PROCEDURE  ?a  ?g  hasSynth  ?b   => ?a  hasSynth  ?b",
"?a  HAS_PROVIDER  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?g  HAS_ADDRESS  ?a  ?g  hasSynth  ?b   => ?a  hasSynth  ?b",
"?g  BELONGS_TO  ?a  ?g  hasSynth  ?b   => ?a  hasSynth  ?b",
"?g  HAS_CONDITION  ?a  ?g  hasSynth  ?b   => ?a  hasSynth  ?b",
"?a  HAS_PROCEDURE  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?g  HAS_DRUG  ?a  ?g  hasSynth  ?b   => ?a  hasSynth  ?b",
"?g  HAS_PROVIDER  ?a  ?g  hasSynth  ?b   => ?a  hasSynth  ?b",
"?g  HAS_OBSERVATION  ?a  ?g  hasSynth  ?b   => ?a  hasSynth  ?b",
"?a  HAS_DRUG  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?g  HAS_END  ?a  ?g  hasSynth  ?b   => ?a  hasSynth  ?b",
"?a  NEXT  ?h  ?h  hasSynth  ?b   => ?a  hasSynth  ?b",
"?g  NEXT  ?a  ?g  hasSynth  ?b   => ?a  hasSynth  ?b",
"?g  HAS_ENCOUNTER  ?a  ?g  hasSynth  ?b   => ?a  hasSynth  ?b"],
"queries":[
"MATCH (a)-[:NEXT]->(b) WHERE not (a)-[:HAS_END]->(b) MERGE (a)-[:HAS_END {added:True}]->(b)",
"MATCH (a)-[:HAS_END]->(b) WHERE not (a)-[:NEXT]->(b) MERGE (a)-[:NEXT {added:True}]->(b)",
"MATCH (h)-[:HAS_CARE_PLAN]->(b), (a)-[:HAS_END]->(h) WHERE not (a)-[:NEHAS_CARE_PLANXT]->(b) MERGE (a)-[:HAS_CARE_PLAN {added:True}]->(b)",
"MATCH (g)-[:BELONGS_TO]->(a), (g)-[:HAS_ADDRESS]->(b) WHERE not (a)-[:HAS_ADDRESS]->(b) MERGE (a)-[:HAS_ADDRESS {added:True}]->(b)",
"MATCH (h)-[:HAS_CARE_PLAN]->(b), (a)-[:NEXT]->(h) WHERE not (a)-[:HAS_CARE_PLAN]->(b) MERGE (a)-[:HAS_CARE_PLAN {added:True}]->(b)",
"MATCH (a)-[:BELONGS_TO]->(h), (h)-[:HAS_ADDRESS]->(b) WHERE not (a)-[:HAS_ADDRESS]->(b) MERGE (a)-[:HAS_ADDRESS {added:True}]->(b)",
"MATCH (g)-[:HAS_CARE_PLAN]->(b), (g)-[:HAS_END]->(a) WHERE not (a)-[:HAS_CARE_PLAN]->(b) MERGE (a)-[:HAS_CARE_PLAN {added:True}]->(b)",
"MATCH (h)-[:HAS_CONDITION]->(b), (a)-[:HAS_END]->(h) WHERE not (a)-[:HAS_CONDITION]->(b) MERGE (a)-[:HAS_CONDITION {added:True}]->(b)",
"MATCH (g)-[:HAS_PAYER]->(b), (g)-[:NEXT]->(a) WHERE not (a)-[:HAS_PAYER]->(b) MERGE (a)-[:HAS_PAYER {added:True}]->(b)",
"MATCH (h)-[:HAS_PROVIDER]->(b), (a)-[:NEXT]->(h) WHERE not (a)-[:HAS_PROVIDER]->(b) MERGE (a)-[:HAS_PROVIDER {added:True}]->(b)",
"MATCH (h)-[:HAS_PAYER]->(b), (a)-[:NEXT]->(h) WHERE not (a)-[:HAS_PAYER]->(b) MERGE (a)-[:HAS_PAYER {added:True}]->(b)",
"MATCH (g)-[:HAS_ENCOUNTER]->(a), (g)-[:INSURANCE_START]->(b) WHERE not (a)-[:HAS_PAYER]->(b) MERGE (a)-[:HAS_PAYER {added:True}]->(b)",
"MATCH (g)-[:HAS_CONDITION]->(b), (g)-[:NEXT]->(a) WHERE not (a)-[:HAS_CONDITION]->(b) MERGE (a)-[:HAS_CONDITION {added:True}]->(b)",
"MATCH (g)-[:HAS_ENCOUNTER]->(a), (g)-[:INSURANCE_END]->(b) WHERE not (a)-[:HAS_PAYER]->(b) MERGE (a)-[:HAS_PAYER {added:True}]->(b)",
"MATCH (g)-[:HAS_PROVIDER]->(b), (g)-[:NEXT]->(a) WHERE not (a)-[:HAS_PROVIDER]->(b) MERGE (a)-[:HAS_PROVIDER {added:True}]->(b)",
"MATCH (h)-[:HAS_CONDITION]->(b), (a)-[:NEXT]->(h) WHERE not (a)-[:HAS_CONDITION]->(b) MERGE (a)-[:HAS_CONDITION {added:True}]->(b)",
"MATCH (g)-[:HAS_CONDITION]->(b), (g)-[:HAS_END]->(a) WHERE not (a)-[:HAS_CONDITION]->(b) MERGE (a)-[:HAS_CONDITION {added:True}]->(b)",
"MATCH (a)-[:HAS_END]->(h), (b)-[:NEXT]->(h) WHERE not (a)-[:HAS_END]->(b) MERGE (a)-[:HAS_END {added:True}]->(b)",
"MATCH (g)-[:HAS_PROCEDURE]->(b), (g)-[:NEXT]->(a) WHERE not (a)-[:HAS_PROCEDURE]->(b) MERGE (a)-[:HAS_PROCEDURE {added:True}]->(b)",
"MATCH (b)-[:HAS_PAYER]->(h), (a)-[:INSURANCE_START]->(h) WHERE not (a)-[:HAS_ENCOUNTER]->(b) MERGE (a)-[:HAS_ENCOUNTER {added:True}]->(b)",
"MATCH (h)-[:NEXT]->(b), (a)-[:NEXT]->(h) WHERE not (a)-[:HAS_END]->(b) MERGE (a)-[:HAS_END {added:True}]->(b)",
"MATCH (b)-[:HAS_PAYER]->(h), (a)-[:INSURANCE_END]->(h) WHERE not (a)-[:HAS_ENCOUNTER]->(b) MERGE (a)-[:HAS_ENCOUNTER {added:True}]->(b)",
"MATCH (a)-[:HAS_END]->(h), (h)-[:NEXT]->(b) WHERE not (a)-[:HAS_END]->(b) MERGE (a)-[:HAS_END {added:True}]->(b)",
"MATCH (a)-[:HAS_ENCOUNTER]->(h), (b)-[:HAS_END]->(h) WHERE not (a)-[:HAS_ENCOUNTER]->(b) MERGE (a)-[:HAS_ENCOUNTER {added:True}]->(b)",
"MATCH (h)-[:HAS_DRUG]->(b), (a)-[:HAS_END]->(h) WHERE not (a)-[:HAS_DRUG]->(b) MERGE (a)-[:HAS_DRUG {added:True}]->(b)",
"MATCH (h)-[:HAS_DRUG]->(b), (a)-[:NEXT]->(h) WHERE not (a)-[:HAS_DRUG]->(b) MERGE (a)-[:HAS_DRUG {added:True}]->(b)",
"MATCH (a)-[:HAS_ENCOUNTER]->(h), (b)-[:NEXT]->(h) WHERE not (a)-[:HAS_ENCOUNTER]->(b) MERGE (a)-[:HAS_ENCOUNTER {added:True}]->(b)",
"MATCH (g)-[:HAS_DRUG]->(b), (g)-[:NEXT]->(a) WHERE not (a)-[:HAS_DRUG]->(b) MERGE (a)-[:HAS_DRUG {added:True}]->(b)",
"MATCH (a)-[:HAS_ENCOUNTER]->(h), (h)-[:HAS_END]->(b) WHERE not (a)-[:HAS_ENCOUNTER]->(b) MERGE (a)-[:HAS_ENCOUNTER {added:True}]->(b)",
"MATCH (a)-[:HAS_ENCOUNTER]->(h), (h)-[:NEXT]->(b) WHERE not (a)-[:HAS_ENCOUNTER]->(b) MERGE (a)-[:HAS_ENCOUNTER {added:True}]->(b)",
"MATCH (g)-[:HAS_DRUG]->(b), (g)-[:HAS_END]->(a) WHERE not (a)-[:HAS_DRUG]->(b) MERGE (a)-[:HAS_DRUG {added:True}]->(b)",
"MATCH (a)-[:HAS_END]->(h), (b)-[:NEXT]->(h) WHERE not (a)-[:NEXT]->(b) MERGE (a)-[:NEXT {added:True}]->(b)",
"MATCH (a)-[:HAS_ADDRESS]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (a)-[:HAS_CARE_PLAN]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (a)-[:BELONGS_TO]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (a)-[:HAS_OBSERVATION]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (a)-[:HAS_PAYER]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (a)-[:HAS_CONDITION]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (a)-[:HAS_END]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (g)-[:HAS_PROCEDURE]->(a) set a.synth1 = g.synth1, a.updated=True",
"MATCH (a)-[:HAS_PROVIDER]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (g)-[:HAS_ADDRESS]->(a) set a.synth1 = g.synth1, a.updated=True",
"MATCH (g)-[:HAS_CONDITION]->(a) set a.synth1 = g.synth1, a.updated=True",
"MATCH (a)-[:HAS_PROCEDURE]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (g)-[:HAS_DRUG]->(a) set a.synth1 = g.synth1, a.updated=True",
"MATCH (g)-[:HAS_PROVIDER]->(a) set a.synth1 = g.synth1, a.updated=True",
"MATCH (g)-[:HAS_OBSERVATION]->(a) set a.synth1 = g.synth1, a.updated=True",
"MATCH (a)-[:HAS_DRUG]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (g)-[:HAS_END]->(a) set a.synth1 = g.synth1, a.updated=True",
"MATCH (a)-[:NEXT]->(h) set a.synth1 = h.synth1, a.updated=True",
"MATCH (g)-[:NEXT]->(a) set a.synth1 = g.synth1, a.updated=True",
"MATCH (g)-[:HAS_ENCOUNTER]->(a) set a.synth1 = g.synth1, a.updated=True",
"MATCH (a)-[r:SYNTH]-(b) set r.deleted=True"]
}